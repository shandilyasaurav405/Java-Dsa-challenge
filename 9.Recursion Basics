Q1) Print number in decreasing order (n to 1).

public static void printDec(int n){
        if(n==1){
            System.out.println(n);
            return;
        }

        System.out.print(n+" ");
        printDec(n-1);
    }



    public static void main(String[] args) {
       int n = 10;
       printDec(n);
    }


Q2)Print number in increasing order (1 to n).

 public static void printinc(int n){
        if(n==1){
            System.out.print(n+" ");
            return;
        }
       printinc(n-1);
        System.out.print(n+" ");
    }



    public static void main(String[] args) {
       int n = 10;
       printinc(n);
    }

Q3) sum of number from 1to n.

 public static int calcSum(int n){
        if(n==1){
            return 1;
        }
        int Snm1 = calcSum(n-1);
        int sumn= n+Snm1;
        return sumn;
    }


    public static void main(String[] args) {
       int n = 3;
        System.out.println(calcSum(3));
    }


Q4) Find factorial of a number?

public static int calcFact(int n){
        if(n==0){
            return 1;
        }
        int fnm1 = calcFact(n-1);
        int fn= n*fnm1;
        return fn;
    }


    public static void main(String[] args) {
       int n = 5;
        System.out.println(calcFact(5));
    }


Q5) print Nth fibonacci number .


public static int fib(int n){
        if (n==0 || n== 1){
            return n;
        }
        int f1 = fib(n-1);
        int f2 = fib(n-2);
        int fn = fib(n-1)+fib(n-2);
        return fn;
    }


    public static void main(String[] args) {
       int n = 10;
        System.out.println(fib(n));

    }


Q6) Check if the array is sorted or not.


 public static boolean isSorted(int arr[], int i){
       if(i ==arr.length-1){
           return true;
       }
       if(arr[i] > arr[i+1]){
           return false;
       }
       return isSorted(arr,i+1);
   }
  public static void main(String[] args) {
      int arr[]= {1,2,3, 7,4,5};
        System.out.println(isSorted(arr, 0));


    }



Q7) Write  a function to find the firs occurance of a number in a array.

public static int firstOccurance(int arr[],int key, int i){
           //base case
           if(i== arr.length){
               return -1;
           }
           if(arr[i]==key){
               return i;
           }
           return firstOccurance(arr, key,i+1);
       }
    public static void main(String[] args) {
      int arr[]= {1,2,4, 7,4,5};
      int key = 4;
        System.out.println(firstOccurance(arr,key,0));
    }

Q8)Print xto the power n. (Brute Force)

 public static int power(int x, int n){
          //base case
          if(n==0){
              return 1;
          }
          int xnm1 = power(x,n-1);
          int xn = x * xnm1;
          return xn;
      }
    public static void main(String[] args) {
        System.out.println(power(2,10 ));
    }


Q9) Tiling problem.

      public static int tilingProblem( int n){
        //base case
          if(n ==0 || n ==1){

              return 1;
          }
          //vertical choice
          int fnm1 = tilingProblem(n-1);

          //horizontal choice

          int fnm2 = tilingProblem(n-2);

          int totWays = fnm1 + fnm2;
          return totWays;

          }
    public static void main(String[] args) {

        System.out.println(tilingProblem(3));
    }


Q10) friends Paring.

Given n friends, each one can remain single or can be paired up with some other
friend. Each friend can be paired only once. Find out the total number of ways in
which friends can remain single or can be paired up.

  public static int friendsParing(int n) {
        if(n ==1|| n==2){
            return n;
        }
        //choice
        //single
        int fnm1 = friendsParing(n-1);
        //pair
        int fnm2 = friendsParing(n-2);
        int pairWays = (n-1)*fnm2;

        //total ways

        int totWays = fnm1+pairWays;
        return totWays;
    }

    public static void main(String[] args) {
        System.out.println( friendsParing(3));

    }

Q11) Remove duplicates in a String.


 public static void remove_dup(String str, int idx, StringBuilder newString,boolean map[]){
         //base case
         if(idx == str.length()){
             System.out.println(newString);
             return;
         }
         char currChar = str.charAt(idx);

         if(map[currChar-'a'] == true){
             remove_dup(str,idx+1, newString,map);
         }
         else{
             map[currChar-'a'] = true;

             remove_dup(str,idx+1,newString.append(currChar),map);
         }
     }

    public static void main(String[] args) {
         String str ="aapnnacollege";
         remove_dup(str, 0, new StringBuilder(), new boolean[26]);

    }


Q12) Binary Strings Problem
Print all binary strings of size N without consecutive ones.


public static void printBinaryString(int n, int lastplace, String str){
         //base case
         if(n==0){
             System.out.println(str);
             return;
         }

         printBinaryString(n-1, 0,str+"0");
         if(lastplace == 0){
             printBinaryString(n-1, 1, str +"1");
         }
     }

    public static void main(String[] args) {

      printBinaryString(3,0,"");

    }

Q13) Write a Java recursive method to reverse a given string.


public class StringReverser {

  public static String reverseString(String str) {
    // Base case: if the string is empty or has only one character, it is already reversed
    if (str.isEmpty() || str.length() == 1) {
      return str;
    }

    // Recursive case: reverse the substring starting from the second character and concatenate the first character
    return reverseString(str.substring(1)) + str.charAt(0);
  }

  public static void main(String[] args) {
    String input = "Java, World!";
    String reversed = reverseString(input);
    System.out.println("Original string: " + input);
    System.out.println("Reversed string: " + reversed);
  }
}


Q14) Write a Java recursive method to find the greatest common divisor (GCD) of two numbers.



public class GCDCalculator {

  public static int calculateGCD(int num1, int num2) {
    // Base case: if the second number is 0, the GCD is the first number
    if (num2 == 0) {
      return num1;
    }

    // Recursive case: calculate the GCD by recursively calling the method with num2 as the new num1 and the remainder as num2
    int remainder = num1 % num2;
    return calculateGCD(num2, remainder);
  }

  public static void main(String[] args) {
    int number1 = 16;
    int number2 = 18;
    int gcd = calculateGCD(number1, number2);
    System.out.println("The GCD of " + number1 + " and " + number2 + " is: " + gcd);
  }
}


Q15) sum of digits of a number.

public class Recursions {

public static int sum(int n){
    if(n == 0){
        return 0;
    }
    return (n%10)+ sum(n/10);
}
    public static void main(String[] args) {
    int ans = sum(1342);
        System.out.println(ans);

    }
}


Q16) product of the digits of a number.

public class Recursions {

public static int prod(int n){
    if(n%10 == n){
        return n;
    }
    return (n%10)* prod(n/10);
}
    public static void main(String[] args) {
    int ans = prod(1342);
        System.out.println(ans);

    }
}



Q17) Say digits.
i/p -142;
o/p- ONE FOUR TWO;


public static void say(int n, String arr[]){
   //base case
    if(n == 0){
        return;
    }
    //proessing
    int digit = n%10;
    n = n/10;
    //recursive call
    say(n,arr);
    System.out.println(arr[digit] +" ");
}


    public static void main(String[] args) {

       String arr[] = {"zero","one","two"
                        ,"three","four","five",
                        "six","seven","eight","nine"};

       int n = 142;
       
       say(n,arr);

    }


Q18) chack the array is sorted or not.


public static boolean isSorted(int arr[],int length){
    //base case
    if(length ==0 || length == 1){
        return true;
    }
    if(arr[0] > arr[1]){
        return false;
    }
    else{
        boolean ans =  isSorted(java.util.Arrays.copyOfRange(arr, 1, length), length - 1);
        return ans;
    }

}


    public static void main(String[] args) {

      int arr[] = {1,2,3,4,5,6};
      int length = 6;
     boolean result = isSorted(arr,length);
        System.out.println(result);
    }


  Q19) Find the GCD of the two  numbers.

 static int GCD(int x, int y){
       if(y==0){
           return x;
       }
       return GCD(y,x%y);
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x = sc.nextInt();
        int y = sc.nextInt();
        System.out.println("GCD of x & y is : " +GCD(x,y));

    }
}


Q20) print the element of the array by recursive call.


static void returnArr(int arr[], int idx){
       if(idx == arr.length){
           return;
       }
        System.out.println(arr[idx]);
       returnArr(arr,idx+1);

    }
    public static void main(String[] args) {
       int arr[] = {2,3,4,5,7,8,9};
         returnArr(arr,0);
    }
}
