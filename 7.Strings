Q1) Take a input string from user and print it .

  import java.util.Scanner;

public class strings {


    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String name = sc.next(); //this function is used only for a single word it doesn't contain athe word after space
        System.out.println(name);
    }
}


Q2)Take a input string(two words or a line) from user and print it.


  import java.util.Scanner;

public class strings {


    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String name = sc.nextLine();
        System.out.println(name);
    }
}


Q3)print the length of the String by using length() function.

  public class strings {


    public static void main(String[] args) {
        String fullName = "Saurav Shandilya";
        System.out.println(fullName.length());
    }
}
Q4) Concatinate two String and print it.

public class strings {


    public static void main(String[] args) {
        String firstName = "Saurav";
        String lastName = "Shandilya";
        String fullName = firstName+" "+lastName;
        System.out.println(fullName);
    }
}
  
Q5) print the each character of the string by using charAt.

   public class strings {
    public static void Printletters(String str) {
        for (int i=0; i<str.length();i++){
            System.out.print(str.charAt(i)+" ");
        }
        System.out.println();
    }


    public static void main(String[] args) {
        String firstName = "Saurav";
        String lastName = "Shandilya";
        String fullName = firstName+" "+lastName;

        Printletters(fullName);
    }
}


Q6) Check if a number is palindrome.


  public class strings {
    public static boolean isPalindrome(String str){
        for (int i=0; i<str.length()/2; i++){
            if (str.charAt(i) != str.charAt(str.length()-1-i)){
                  //not a palindrome
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
      String str ="racecar";
        System.out.println(isPalindrome(str));
    }
}

Q7) Given a route containing 4 directions (E, W,N,S) find the shortest path to reach destination
 

public class strings {
    public static float getShortestPath(String path){
        int x =0, y=0;
        for (int i=0; i<path.length();i++){
            char dir = path.charAt(i);
            //south
            if (dir =='S'){
                y--;
            }
            //North
            else if (dir =='N') {
                y++;
            }
            //west
            else if (dir =='W') {
                x--;
            }
            //East
            else{
                x++;
            }
        }
        int X2=x*x; //x square
        int Y2 = y*y;//y square
        return (float)Math.sqrt(X2+Y2);
    }

    public static void main(String[] args) {
      String path ="WNEENESENNN";
        System.out.println(getShortestPath(path));
    }
}

Q8) print substring of a given string.

public class strings {
    public static String substring(String str, int si, int ei){
        String substr ="";
        for (int i=si;i<ei;i++){
            substr += str.charAt(i);
        }
        return substr;
    }
    public static void main(String[] args) {
      String str ="HelloWorld";
        System.out.println(substring(str,0,5));

    }
}


Q9)print largest string from an array.(Laxicographically)

public class strings {


    public static void main(String[] args) {
      String fruits[] ={"apple","mango","banana"};

      String largest =fruits[0];
      for (int i=0;i< fruits.length;i++){
          if(largest.compareTo(fruits[i]) < 0){
              largest = fruits[i];
          }
      }

        System.out.println(largest);

    }
}

Q10) Convert first letter into uppercase.

public static String toUppercase(String str){
     StringBuilder sb = new StringBuilder("");

     char ch = Character.toUpperCase(str.charAt(0));
     sb.append(ch);

     for (int i =1; i<str.length();i++){
        if (str.charAt(i) == ' ' && i<str.length()-1){
            sb.append(str.charAt(i));
            i++;
            sb.append(Character.toUpperCase(str.charAt(i)));
        }else{
            sb.append(str.charAt(i));
        }
     }
     return sb.toString();
 }

    public static void main(String[] args) {
      String str = "hi, i am saurav";
        System.out.println(toUppercase(str));
    }




Q11) String compression

import java.util.Scanner;

public class strings {
    public static String compress(String str){
        String newStr = "";
        for (int i =0; i<str.length();i++){
            Integer count= 1;
            while(i<str.length()-1 && str.charAt(i) == str.charAt(i+1)) {
                count++;
                i++;
            }
            newStr +=str.charAt(i);
            if(count >1){
                newStr +=count.toString();
            }
        }
        return newStr;
    }


    public static void main(String[] args) {
      String str = "aaabbcccdd";
        System.out.println(compress(str));
    }
}


Q12) Count how many times lowercase  & Uppercase vowels occurred in a String entered by the
user.


import java.util.Scanner;

public class strings {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String str = sc.next();
        int count = 0;
        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);
            if (ch == 'a'||ch =='A' || ch == 'e'||ch =='E' || ch == 'i'||ch=='I' || ch == 'o'||ch =='O' || ch == 'u'||ch =='U') {
                count++;
            }
        }
        System.out.println("Count of vowel is : " +count);
    }
}


Q13) Determine if 2 Strings are anagrams of each other.

import java.util.Arrays;
import java.util.Scanner;

public class strings {
    public static void main(String[] args) {
        String S1="LISTEN";
        String S2 = "SILENT";
        char C1[] =  S1.toCharArray();
        char C2 []= S2.toCharArray();
        if (C1.length != C2.length){
            System.out.println("Not anagram");
            System.exit(0);
        }
        Arrays.sort(C1);
        Arrays.sort(C2);

        for (int i =0; i< C1.length; i++){
            if(C1[i] != C2[i]){
                System.out.println("not anagram");
                System.exit(0);
            }
        }
        System.out.println("Anagram");
    }
}


Q14) You are given two integers 'A' and 'B'.Your objective is to determine the number of bit positions where the corresponding bits of ‘A’ and ‘B’ differ,
     i.e., the number of bits that need to be flipped in ‘A’ to obtain ‘B’.
    
     public static int countBitsToFlip(int A, int B) {
        int xorResult = A ^ B;
        int count = 0;
        while (xorResult != 0) {
            count += xorResult & 1;
            xorResult >>= 1;
        }
        return count;
    }
    public static void main(String[] args) {
        int A = 7;
        int B = 12;
        int result = countBitsToFlip(A, B);
        System.out.println("Number of bits to flip: " + result);
    }

Q15) A prime number is a positive integer that is divisible by exactly 2 integers, 1 and the number itself.
You are given a number 'n'.
Find out whether 'n' is prime or not.
  

public class Solution {

    public static String isPrime(int num) {

        //Your code goes here

        if(num<=1){

            return "NO";

        }

        if(num == 2 || num==3){

            return "YES";

        }

        if(num%2==0 || num%3==0){

            return "NO";

        }

        for(int i=5; i<Math.sqrt(num); i=i+6){

            if(num%i==0 || num%(i+2)==0){

                return "NO";

            }

        }

        return "YES";

    }

}
