Q1) Merge Sort.


public class divide_conq {

    public static void printArr(int arr[]){
        for(int i =0; i<arr.length;i++){
            System.out.print(arr[i] +" ");
        }
        System.out.println();
    }

   public static void MergeSort(int arr[], int si, int ei){
       //base case
       if(si>= ei){
           return;
       }
       //recursive work
       int mid = si+(ei-si)/2;
       MergeSort(arr,si,mid); //left part
       MergeSort(arr,mid+1,ei); //right part

       // for merge left and right  sorted array
       merge(arr,si, mid,ei);

   }
    public static void merge(int arr[], int si,int mid, int ei){
          int temp[] = new int [ei-si+1];
          int i = si;  //iterator for left part

          int j = mid+1; //iterator for right parts
        int k = 0; //iterator for temp. array

        while (i<= mid && j<= ei){
            if(arr[i] < arr[j]){
                temp[k] = arr[i];
                i++;
            }
            else{
                temp[k] = arr[j];
                j++;
            }
            k++;
        }
        //left part
        while(i<= mid){
            temp[k++] = arr[i++];
        }
        //right part
        while(j<= ei){
            temp[k++] = arr[j++];
        }
        //copy temp to original array
        for(k =0, i=si; k<temp.length;k++,i++){
            arr[i] = temp[k];
        }

    }

    public static void main(String[] args) {
         int arr[] = {3,2,6,8,9,2,5};
         MergeSort(arr,0, arr.length-1);
         printArr(arr);
    }
}


Q2) Quick sort

public static void printArr(int arr[]){
        for(int i =0; i<arr.length;i++){
            System.out.print(arr[i] +" ");

        }
        System.out.println();
    }
    public  static  void QuickSort(int arr[], int si, int ei){
        //base case
        if(si>= ei){
            return;
        }
        //pivot
        int pIdx = partition(arr, si,ei);
        QuickSort(arr, si, pIdx-1);//left part
        QuickSort(arr, pIdx+1,ei); // Right part

    }

    public static int partition(int arr[], int si, int ei) {
         int pivot = arr[ei];
         int i = si-1;
         for(int j =si; j<ei;j++){
             if(arr[j] <= pivot){
                 i++;
                 int temp = arr[j];
                 arr[j] = arr[i];
                 arr[i] = temp;
             }
         }
         i++;
         int temp = pivot;
         arr[ei] = arr[i];
         arr[i] = temp;
         return i;
    }

    public static void main(String[] args) {
        int arr[] = {6,3,9,8,2};
        QuickSort(arr, 0, arr.length-1);
        printArr(arr);
    }


