Q1) Update the array with the help of method/function?

 public static void update(int marks[]){
        for (int i = 0; i< marks.length;i++){
             marks[i] = marks[i] + 1;
        }

    }

    public static void main(String[] args) {
        int marks[] = {97,98,99};
        update(marks);
        //print our marks
        for (int i = 0; i< marks.length;i++){
            System.out.print(marks[i] + " ");
        }
        System.out.println();
    }

Q2) write the code to find a key in the given array of int type?

 public static int linearSearch(int numbers[], int key) {
        for (int i =0;i<numbers.length; i++){
            if (numbers[i] == key){
                return i;
            }
        }
        return -1;
    }

    public static void main(String[] args) {

        int numbers[] = {2,4,6,8,10,12,14,16}; //given array
        int key = 10;                          //given key
        int index = linearSearch(numbers,key);
        if (index == -1){
            System.out.println("NOT FOUND!");
        }else {
            System.out.println("key is at index : " + index);
        }

    }

Q3)write the code to find a key in the given array of string type ?

public static int linearSearch(String menu[], String key) {

        for (int i =0;i<menu.length; i++){
            if (menu[i] == key){
                return i;
            }
        }
        return -1;
    }

    public static void main(String[] args) {

        String menu[] = {"dosa","samosa","frooti","coke","Momos"};
        String key = "coke";
        int index = linearSearch(menu,key);
        if (index == -1){
            System.out.println("NOT FOUND!");
        }else {
            System.out.println("key is at index : " + index);
        }

    }

Q4) Find the largest number in the given array?

 public static int getLargest(int numbers[]) {
        int largest = Integer.MIN_VALUE;
        for (int i = 0; i< numbers.length; i++){
            if (largest < numbers[i]){
                largest = numbers[i];
            }
        }
       return largest;
    }

    public static void main(String[] args) {
         int numbers[] = {1, 2, 6, 3, 5};
        System.out.println("largest value is : " +getLargest(numbers));
    }


**********************************************Binary Search*******************************************************************
Q5) find the key in an array of int. type with binary search?

  public static int binarySearch(int numbers[], int key){
        int start = 0, end = numbers.length-1;
        while (start <= end){
            int mid = (start + end)/2;

            //comparision
            if (numbers[mid] == key) {
                return mid;
            }
            if (numbers[mid] < key){
                start = mid +1;
            } else {
                end = mid -1;
            }
        }
        return -1;
    }

    public static void main(String[] args) {
        int numbers[] = {2, 4, 6, 8, 10, 12, 14, 16};
        int key = 10;

        System.out.println("index for key is : " +binarySearch(numbers,key));
    }

Q6) Reverse an array?


 public static void ReverseArray(int numbers[]){
        int first =0, last = numbers.length-1;

        while (first < last){
        //swap
        int temp = numbers[last];
        numbers[last] = numbers[first];
        numbers[first] = temp;

        first++;
        last--;
    }
    }
    
    public static void main(String[] args) {
        int numbers[] = {2, 4, 6, 8, 10};
        ReverseArray(numbers);
       for (int i = 0; i< numbers.length;i++){
           System.out.print(numbers[i]+" ");
       }
        System.out.println();
    }


Q7) Pairs in an array ?

public static void Pairs(int numbers[]) {
        for (int i =0; i<numbers.length; i++){
            int curr = numbers[i];
          for (int j = i+1; j<numbers.length; j++){
              System.out.print("(" +curr + "," +numbers[j] +") ");
          }
            System.out.println();
        }
    }


    public static void main(String[] args) {
        int numbers[] = {2, 4, 6, 8, 10};
        Pairs(numbers);

    }



