Q1) Update the array with the help of method/function?

 public static void update(int marks[]){
        for (int i = 0; i< marks.length;i++){
             marks[i] = marks[i] + 1;
        }

    }

    public static void main(String[] args) {
        int marks[] = {97,98,99};
        update(marks);
        //print our marks
        for (int i = 0; i< marks.length;i++){
            System.out.print(marks[i] + " ");
        }
        System.out.println();
    }

Q2) write the code to find a key in the given array of int type?

 public static int linearSearch(int numbers[], int key) {
        for (int i =0;i<numbers.length; i++){
            if (numbers[i] == key){
                return i;
            }
        }
        return -1;
    }

    public static void main(String[] args) {

        int numbers[] = {2,4,6,8,10,12,14,16}; //given array
        int key = 10;                          //given key
        int index = linearSearch(numbers,key);
        if (index == -1){
            System.out.println("NOT FOUND!");
        }else {
            System.out.println("key is at index : " + index);
        }

    }

Q3)write the code to find a key in the given array of string type ?

public static int linearSearch(String menu[], String key) {

        for (int i =0;i<menu.length; i++){
            if (menu[i] == key){
                return i;
            }
        }
        return -1;
    }

    public static void main(String[] args) {

        String menu[] = {"dosa","samosa","frooti","coke","Momos"};
        String key = "coke";
        int index = linearSearch(menu,key);
        if (index == -1){
            System.out.println("NOT FOUND!");
        }else {
            System.out.println("key is at index : " + index);
        }

    }

Q4) Find the largest number in the given array?

 public static int getLargest(int numbers[]) {
        int largest = Integer.MIN_VALUE;
        for (int i = 0; i< numbers.length; i++){
            if (largest < numbers[i]){
                largest = numbers[i];
            }
        }
       return largest;
    }

    public static void main(String[] args) {
         int numbers[] = {1, 2, 6, 3, 5};
        System.out.println("largest value is : " +getLargest(numbers));
    }


**********************************************Binary Search*******************************************************************
Q5) find the key in an array of int. type with binary search?

  public static int binarySearch(int numbers[], int key){
        int start = 0, end = numbers.length-1;
        while (start <= end){
            int mid = (start + end)/2;

            //comparision
            if (numbers[mid] == key) {
                return mid;
            }
            if (numbers[mid] < key){
                start = mid +1;
            } else {
                end = mid -1;
            }
        }
        return -1;
    }

    public static void main(String[] args) {
        int numbers[] = {2, 4, 6, 8, 10, 12, 14, 16};
        int key = 10;

        System.out.println("index for key is : " +binarySearch(numbers,key));
    }

Q6) Reverse an array?


 public static void ReverseArray(int numbers[]){
        int first =0, last = numbers.length-1;

        while (first < last){
        //swap
        int temp = numbers[last];
        numbers[last] = numbers[first];
        numbers[first] = temp;

        first++;
        last--;
    }
    }
    
    public static void main(String[] args) {
        int numbers[] = {2, 4, 6, 8, 10};
        ReverseArray(numbers);
       for (int i = 0; i< numbers.length;i++){
           System.out.print(numbers[i]+" ");
       }
        System.out.println();
    }


Q7) Pairs in an array ?

public static void Pairs(int numbers[]) {
        for (int i =0; i<numbers.length; i++){
            int curr = numbers[i];
          for (int j = i+1; j<numbers.length; j++){
              System.out.print("(" +curr + "," +numbers[j] +") ");
          }
            System.out.println();
        }
    }


    public static void main(String[] args) {
        int numbers[] = {2, 4, 6, 8, 10};
        Pairs(numbers);
}

Q8) Left rotate an array by one place.

 static int[] rotateArray(int[] arr, int n) {
        // Write your code here.
        int temp = arr[0];
        for(int i =1; i<arr.length;i++){
            arr[i-1] = arr[i];

        }
        arr[n-1] = temp;
        return arr;

    }
}


Q9) Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.

Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things:

Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.
Return k.


ss Solution {
    public int removeDuplicates(int[] nums) {
         int j = 1;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] != nums[i - 1]) {
                nums[j] = nums[i];
                j++;
            }
        }
        return j;
    }

Q10) Lower bound.


import java.util.*;

public class tUf {

    public static int lowerBound(int []arr, int n, int x) {
        int low = 0, high = n - 1;
        int ans = n;

        while (low <= high) {
            int mid = (low + high) / 2;
            // maybe an answer
            if (arr[mid] >= x) {
                ans = mid;
                //look for smaller index on the left
                high = mid - 1;
            } else {
                low = mid + 1; // look on the right
            }
        }
        return ans;
    }

    public static void main(String[] args) {
        int[] arr = {3, 5, 8, 15, 19};
        int n = 5, x = 9;
        int ind = lowerBound(arr, n, x);
        System.out.println("The lower bound is the index: " + ind);
    }
} 


Q11) Search element in a rotated array.(Brute force)


  import java.util.*;

public class tUf {
    public static int search(ArrayList<Integer> arr, int n, int k) {
        for (int i = 0; i < n; i++) {
            if (arr.get(i) == k)
                return i;
        }
        return -1;
    }

    public static void main(String[] args) {
        ArrayList<Integer> arr = new ArrayList<>(Arrays.asList(7, 8, 9, 1, 2, 3, 4, 5, 6));
        int n = 9, k = 1;
        int ans = search(arr, n, k);
        if (ans == -1)
            System.out.println("Target is not present.");
        else
            System.out.println("The index is: " + ans);
    }
}


Q12) Search element in a rotated array.(Optimal solution).


import java.util.*;

public class tUf {
    public static int search(ArrayList<Integer> arr, int n, int k) {
        int low = 0, high = n - 1;
        while (low <= high) {
            int mid = (low + high) / 2;

            // if mid points to the target
            if (arr.get(mid) == k)
                return mid;

            // if left part is sorted
            if (arr.get(low) <= arr.get(mid)) {
                if (arr.get(low) <= k && k <= arr.get(mid)) {
                    // element exists
                    high = mid - 1;
                } else {
                    // element does not exist
                    low = mid + 1;
                }
            } else { // if right part is sorted
                if (arr.get(mid) <= k && k <= arr.get(high)) {
                    // element exists
                    low = mid + 1;
                } else {
                    // element does not exist
                    high = mid - 1;
                }
            }
        }
        return -1;
    }

    public static void main(String[] args) {
        ArrayList<Integer> arr = new ArrayList<>(Arrays.asList(7, 8, 9, 1, 2, 3, 4, 5, 6));
        int n = 9, k = 1;
        int ans = search(arr, n, k);
        if (ans == -1)
            System.out.println("Target is not present.");
        else
            System.out.println("The index is: " + ans);
    }
}
  

Q13) Superior Elements

Problem statement
There is an integer array ‘a’ of size ‘n’.



An element is called a Superior Element if it is greater than all the elements present to its right.



You must return an array all Superior Elements in the array ‘a’.



Note:

The last element of the array is always a Superior Element. 



import java.util.*;
public class Solution {
    public static List< Integer > superiorElements(int []a) {
        int n = a.length;

        // Max element to the right.
        int maxElement = a[n - 1];

        List < Integer > answer = new ArrayList<>();

        // Last element is always a superior element.
        answer.add(a[n - 1]);

        // Iterate from right to left.
        for (int i = n - 2; i >= 0; i--) {

            // If current element is greater than all
            // the elements to the right of itself.
            if (a[i] > maxElement) {
                answer.add(a[i]);
                maxElement = a[i];
            }
        }

        // Return the 'answer' here.
        return answer;
    }
}


Q14) Two Sum (Brute force).


public class Solution {
    public static String read(int n, int []book, int target){
        // Write your code here.
        for(int i =0; i<n ; i++){
            for(int j =i+1; j<n;j++){
                if(book[i] + book[j] == target){
                    return "YES";
                }
            }
           
        }
         return "NO";
    }
}
