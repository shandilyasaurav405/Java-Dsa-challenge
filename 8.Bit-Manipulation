Q1)apply bitwise and(&) on two  binary numbers?

public class bit_manipulation {
    public static void main(String[] args) {
        System.out.println(5&6);
    }
}


Q2)apply bitwise or(|) on two binary numbers?


public class bit_manipulation {
    public static void main(String[] args) {
        System.out.println(5|6);
    }
}

Q3) apply bitwise xor(^) on two binary numbers?


public class bit_manipulation {
    public static void main(String[] args) {
        System.out.println(5 ^ 6);
    }
}

Q4)Binary 1's complement of a number.

public class bit_manipulation {
    public static void main(String[] args) {
        System.out.println(~5);
    }
}


Q5) Binary left shift.

public class bit_manipulation {
    public static void main(String[] args) {
        System.out.println(5<<2);
    }
}


Q6) Binary right shift.

public class bit_manipulation {
    public static void main(String[] args) {
        System.out.println(6>>1);
    }
}


Q7) check if the number is odd or even.

public class bit_manipulation {

    public static void oddOrEven(int n){
        int bitmask =1;
        if((( n & bitmask) ==0)){
            //even no.
            System.out.println("Even number");
        }
        //odd no.
        else{
            System.out.println("Odd number");
        }

    }
    public static void main(String[] args) {
        oddOrEven(3);
        oddOrEven(11);
        oddOrEven(14);
    }
}

Q8) Get i'th bit of a number.

public class bit_manipulation {

    public static int getIthBit(int n, int i){
        int bitmask =1<<i;
        if((( n & bitmask) ==0)){

           return 0;
        }

        else{
           return 1;
        }

    }
    public static void main(String[] args) {
        System.out.println(getIthBit(10, 2));
    }
}

Q9) set i'th bit.


public class bit_manipulation {

    public static int setIthBit(int n, int i){
        int bitmask =1<<i;
        return n | bitmask;


        }

    public static void main(String[] args) {
        System.out.println(setIthBit(10, 2));
    }
}

Q10) Clear i'th bit.

public class bit_manipulation {

    public static int cleartIthBit(int n, int i) {
        int bitmask = ~(1<<i);
        return n & bitmask;
    }

    public static void main(String[] args) {
        System.out.println(cleartIthBit(10, 1));
    }
}


Q11) update I'th bit.

public class bit_manipulation {

    public static int setIthBit(int n, int i){
        int bitmask =1<<i;
        return n | bitmask;
        }
    public static  int clearIthbit(int n, int i){
        int bitmask = ~(1<<i);
        return n & bitmask;
        }

   public static int updateIthBit(int n, int i, int newBit) {
        if(newBit == 0){
            return clearIthbit(n, i);
        }
        else {
            return setIthBit(n, i);
        }

   }

    public static void main(String[] args) {
        System.out.println(updateIthBit(10, 2, 1 ));
    }
}


Q12) Update i'th bit (In depth concept of bit manipulation).

public class bit_manipulation {

    public static int setIthBit(int n, int i){
        int bitmask =1<<i;
        return n | bitmask;
        }
    public static  int clearIthbit(int n, int i){
        int bitmask = ~(1<<i);
        return n & bitmask;
        }

   public static int updateIthBit(int n, int i, int newBit) {

       //   second way
       n = clearIthbit(n, i);
       int bitMask = newBit << i;
       return n | bitMask;
   }

    public static void main(String[] args) {
        System.out.println(updateIthBit(10, 2, 1 ));
    }
}

Q13) clear last I bits.

public class bit_manipulation {

   public static int clearIBits(int n, int i){
       int bitmask = (~0)<<i;
       return n & bitmask;
   }
    public static void main(String[] args) {
        System.out.println(  clearIBits(15,2));

    }
}


Q14) Clear range of bits.

public class bit_manipulation {

   public static int clearRangeOfBits(int n, int i, int j){
       int a =((~0)<< (j+1));
       int b = (1<<i)-1;
       int bitMask = a|b;
       return  n & bitMask;

   }
    public static void main(String[] args) {
        System.out.println(  clearRangeOfBits(15,2,7));
    }
}

