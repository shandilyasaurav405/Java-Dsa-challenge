Q1)apply bitwise and(&) on two  binary numbers?

public class bit_manipulation {
    public static void main(String[] args) {
        System.out.println(5&6);
    }
}


Q2)apply bitwise or(|) on two binary numbers?


public class bit_manipulation {
    public static void main(String[] args) {
        System.out.println(5|6);
    }
}

Q3) apply bitwise xor(^) on two binary numbers?


public class bit_manipulation {
    public static void main(String[] args) {
        System.out.println(5 ^ 6);
    }
}

Q4)Binary 1's complement of a number.

public class bit_manipulation {
    public static void main(String[] args) {
        System.out.println(~5);
    }
}


Q5) Binary left shift.

public class bit_manipulation {
    public static void main(String[] args) {
        System.out.println(5<<2);
    }
}


Q6) Binary right shift.

public class bit_manipulation {
    public static void main(String[] args) {
        System.out.println(6>>1);
    }
}


Q7) check if the number is odd or even.

public class bit_manipulation {

    public static void oddOrEven(int n){
        int bitmask =1;
        if((( n & bitmask) ==0)){
            //even no.
            System.out.println("Even number");
        }
        //odd no.
        else{
            System.out.println("Odd number");
        }

    }
    public static void main(String[] args) {
        oddOrEven(3);
        oddOrEven(11);
        oddOrEven(14);
    }
}

Q8) Get i'th bit of a number.

public class bit_manipulation {

    public static int getIthBit(int n, int i){
        int bitmask =1<<i;
        if((( n & bitmask) ==0)){

           return 0;
        }

        else{
           return 1;
        }

    }
    public static void main(String[] args) {
        System.out.println(getIthBit(10, 2));
    }
}

Q9) set i'th bit.


public class bit_manipulation {

    public static int setIthBit(int n, int i){
        int bitmask =1<<i;
        return n | bitmask;


        }

    public static void main(String[] args) {
        System.out.println(setIthBit(10, 2));
    }
}

Q10) Clear i'th bit.

public class bit_manipulation {

    public static int cleartIthBit(int n, int i) {
        int bitmask = ~(1<<i);
        return n & bitmask;
    }

    public static void main(String[] args) {
        System.out.println(cleartIthBit(10, 1));
    }
}


Q11) update I'th bit.

public class bit_manipulation {

    public static int setIthBit(int n, int i){
        int bitmask =1<<i;
        return n | bitmask;
        }
    public static  int clearIthbit(int n, int i){
        int bitmask = ~(1<<i);
        return n & bitmask;
        }

   public static int updateIthBit(int n, int i, int newBit) {
        if(newBit == 0){
            return clearIthbit(n, i);
        }
        else {
            return setIthBit(n, i);
        }

   }

    public static void main(String[] args) {
        System.out.println(updateIthBit(10, 2, 1 ));
    }
}


Q12) Update i'th bit (In depth concept of bit manipulation).

public class bit_manipulation {

    public static int setIthBit(int n, int i){
        int bitmask =1<<i;
        return n | bitmask;
        }
    public static  int clearIthbit(int n, int i){
        int bitmask = ~(1<<i);
        return n & bitmask;
        }

   public static int updateIthBit(int n, int i, int newBit) {

       //   second way
       n = clearIthbit(n, i);
       int bitMask = newBit << i;
       return n | bitMask;
   }

    public static void main(String[] args) {
        System.out.println(updateIthBit(10, 2, 1 ));
    }
}

Q13) clear last I bits.

public class bit_manipulation {

   public static int clearIBits(int n, int i){
       int bitmask = (~0)<<i;
       return n & bitmask;
   }
    public static void main(String[] args) {
        System.out.println(  clearIBits(15,2));

    }
}


Q14) Clear range of bits.

public class bit_manipulation {

   public static int clearRangeOfBits(int n, int i, int j){
       int a =((~0)<< (j+1));
       int b = (1<<i)-1;
       int bitMask = a|b;
       return  n & bitMask;

   }
    public static void main(String[] args) {
        System.out.println(  clearRangeOfBits(15,2,7));
    }
}

Q15) check a number is power of 2 or not.

public class bit_manipulation {
    public  static boolean isPower(int n){
        return (n&(n-1)) == 0;
    }
    public static void main(String[] args) {

        System.out.println(isPower(7));
    }
}


Q16) Count set bits in a number.

public class bit_manipulation {
    public static int countSetBits(int n){
        int count = 0;
        while(n>0) {
            if((n&1) != 0){
                count++;
            }
            n = n>>1;
        }
        return count;
        }


    public static void main(String[] args) {

        System.out.println(countSetBits(10));
    }
}

Q17) fast eponentiation.


public class bit_manipulation {
    public static int fastExpo(int a,int n) {
       int ans = 1;
       while(n>0){
           if((n & 1) != 0){//check LSB
               ans = ans*a;
           }
           a = a*a;
           n = n>>1;
       }
     return ans;
    }
    public static void main(String[] args) {
        System.out.println(fastExpo(3, 5));
    }
}

Q17) Swap two numbers without using any third variable.

import java.util.Scanner;

public class bit_manipulation {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("enter a : ");
        int a = sc.nextInt();
        System.out.println("enter b : ");
        int b = sc.nextInt();
        a = a^b;
        b=a^b;
        a=a^b;
        System.out.println(a+" "+b);
    }
}

18)Add 1 to an integer using Bit Manipulation.

import java.util.Scanner;

public class bit_manipulation {
    public static void main(String[] args) {
        int x = 6;
        System.out.println(x + " + " + 1 + " is " + -~x);
        x = -4;
        System.out.println(x + " + " + 1 + " is " + -~x);
        x = 0;
        System.out.println(x + " + " + 1 + " is " + -~x);
    }
}

Q19) Convert uppercase characters to lowercase using bits.

import java.util.Scanner;

public class bit_manipulation {
    public static void main(String[] args) {
// Convert uppercase character to lowercase
        for (char ch = 'A'; ch <= 'Z'; ch++) {
            System.out.print((char) (ch | ' ')+" ");

        }
    }
}


Q20) convert lowercase character to uppercase using bits.


import java.util.Scanner;

public class bit_manipulation {
    public static void main(String[] args) {
// Convert uppercase character to Upperase
        for (char ch = 'a'; ch <= 'z'; ch++) {
            System.out.print((char) (ch & '_')+" ");

        }
    }
}



Q20) Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.
   The integer division should truncate toward zero, which means losing its fractional part.
     For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.
       Return the quotient after dividing dividend by divisor.
    
   public static int divide(int dividend, int divisor) {
        if (divisor == 0) {
            throw new IllegalArgumentException("Cannot divide by zero");
        }
        if (dividend == Integer.MIN_VALUE && divisor == -1) {
            return Integer.MAX_VALUE;
        }
        int sign = (dividend < 0) ^ (divisor < 0) ? -1 : 1;
        long absDividend = Math.abs((long) dividend);
        long absDivisor = Math.abs((long) divisor);
        long quotient = 0;
        while (absDividend >= absDivisor) {
            long tempDivisor = absDivisor;
            long multiple = 1;
            while (absDividend >= (tempDivisor << 1)) {
                tempDivisor <<= 1;
                multiple <<= 1;
            }
            absDividend -= tempDivisor;
            quotient += multiple;
        }
        return (int) (sign * quotient);
    }
    public static void main(String[] args) {
        int dividend = 10;
        int divisor = 3;
        int result = divide(dividend, divisor);

        System.out.println("Quotient: " + result);
    }

