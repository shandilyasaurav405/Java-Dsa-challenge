Q1)apply bitwise and(&) on two  binary numbers?

public class bit_manipulation {
    public static void main(String[] args) {
        System.out.println(5&6);
    }
}


Q2)apply bitwise or(|) on two binary numbers?


public class bit_manipulation {
    public static void main(String[] args) {
        System.out.println(5|6);
    }
}

Q3) apply bitwise xor(^) on two binary numbers?


public class bit_manipulation {
    public static void main(String[] args) {
        System.out.println(5 ^ 6);
    }
}

Q4)Binary 1's complement of a number.

public class bit_manipulation {
    public static void main(String[] args) {
        System.out.println(~5);
    }
}


Q5) Binary left shift.

public class bit_manipulation {
    public static void main(String[] args) {
        System.out.println(5<<2);
    }
}


Q6) Binary right shift.

public class bit_manipulation {
    public static void main(String[] args) {
        System.out.println(6>>1);
    }
}


Q7) check if the number is odd or even.

public class bit_manipulation {

    public static void oddOrEven(int n){
        int bitmask =1;
        if((( n & bitmask) ==0)){
            //even no.
            System.out.println("Even number");
        }
        //odd no.
        else{
            System.out.println("Odd number");
        }

    }
    public static void main(String[] args) {
        oddOrEven(3);
        oddOrEven(11);
        oddOrEven(14);
    }
}

Q8) Get i'th bit of a number.

public class bit_manipulation {

    public static int getIthBit(int n, int i){
        int bitmask =1<<i;
        if((( n & bitmask) ==0)){

           return 0;
        }

        else{
           return 1;
        }

    }
    public static void main(String[] args) {
        System.out.println(getIthBit(10, 2));
    }
}


